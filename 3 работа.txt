Вариант 1
Создать класс Person со следующими свойствами: имя, фамилия, возраст, пол.
Создать пользовательскую коллекцию Group, которая работает только с Person и производными от него классами.
Создать классы: Student (добавить курс и факультет) и Teacher (добавить специальность и факультет), которые расширяют Person.
Заполнить пользовательскую коллекцию тестовыми данными (придумать самостоятельно), не менее 12 элементов, при этом должны быть разные типы: Person, Student, Teacher.
Написать для заполненной тестовыми данными коллекции запросы на LINQ как методы коллекции:
    - поиск всех людей младше определенного кол-ва лет
    - сортировка (по фамилии, затем по имени, затем по возрасту)
    - получение из коллекции массива строк следующего формата: "ФАМИЛИЯ ИМЯ, ВОЗРАСТ, (ПОЛ)"
    - сгруппировать всех по факультету и вывести для определенного факультета либо студентов, либо преподавателей (в зависимости от переданных в метод аргументов)
	
	
Вариант 2
Создать класс Person со следующими свойствами: имя, фамилия, возраст, пол.
Создать пользовательскую коллекцию Group, которая работает только с Person и производными от него классами. Каждая персона содержит данные: имя, фамилия, день рождения, образование.
Создать классы: Worker и Manager (внутри содержит Squad типа Group, в данном поле содержится список подчиненных)
Заполнить пользовательскую коллекцию тестовыми данными (придумать самостоятельно), не менее 3 менеджеров внутри данной коллекции, у каждого менеджера добавить в Squad подчиненных (не менее 4 для каждого).
Написать для заполненной тестовыми данными коллекции запросы на LINQ  как методы коллекции:
	- получение списка именинников в определенном месяце и в определенной команде
	- получение общего списка всех работников, не старше определенного возраста (например, не старше 30 лет)
	- сгруппировать всех работников по образованию
	
Вариант 3
Создать класс Shop со следующими свойствами: имя директора, адрес (адрес - отдельный класс), состоящий из улицы и дома. Создать класс District - район города, внутри которого будет содержаться коллекция, которая будет содержать улицы, которые относятся к данному району.
Создать пользовательскую коллекцию магазинов - сеть магазинов. Заполнить тестовыми данными (придумать самостоятельно), не менее 10 магазинов. Создать коллекцию районов - не менее 4, в каждом из которых не менее 5 улиц. Коллекция райнов должна содержаться внутри пользовательской коллекции как отдельное свойство.
Написать  для заполненных тестовыми данными коллекций запросы на LINQ  как методы коллекции:
	- выбрать магазины для определенного района
	- получить объект, содержащий информацию - район, кол-во магазинов в этом районе
	- получить список магазинов, в котором указано: название в виде: "ул. НАЗВАНИЕ_УЛИЦЫ, 10", район, имя директора
	
Вариант 4
Создать абстрактный класс электронных устройств (со свойствами: название, цена) и пользовательскую коллекцию, которая работает только с такими устройствами и производными от него классами. 
Создать производные классы электронных устройств: компьютер (со свойствами: процессор, ОЗУ, HDD), принтер (кол-во стр/мин, цветной/черно-белый), телефон (расширение экрана, ОС, версия ОС), планшет (расширение экрана, ОС, версия ОС, с 3G/без него).
Заполнить коллекцию тестовыми данными (придумать самостоятельно), не менее 20 устройств.
Написать  для заполненных тестовыми данными коллекций запросы на LINQ  как методы коллекции:
    - получить планшеты со стоимостью не более определенной в аргументах суммы
    - получить принтеры и компьютеры
    - найти телефоны и планшеты с одинаковыми характеристиками
    - подсчитать процент планшетов от общего кол-ва устройств

Вариант 5
Создать абстрактный класс Building со следующими параметрами - высота, площадь, кол-во этажей.
Создать пользовательскую коллекцию Architecture, которая работает только с Building и производными от него классами.
Создать производные классы зданий: жилой дом (с параметрами: адрес, район города), офисный центр (с параметрами: адрес, район города), гараж.
Заполнить коллекцию тестовыми данными (придумать самостоятельно), не менее 20.
Написать  для заполненных тестовыми данными коллекций запросы на LINQ  как методы коллекции:
    - получить здания высотой, менее, чем указана в первом аргументе, и площадью более, чем указано во втором
    - получить все районы со списком жилых домов и офисных центров
    - сгруппировать все здания по кол-ву этажей

Вариант 6
Создать абстрактный класс Furniture (размеры - длина, ширина, высота, стоимость, материал) и производные от него классы: диван, кресло (параметры: есть спинка/нет, раскладное/не раскладное), кровать (параметры: тип-односпальная, двуспальная)
Создать пользовательскую коллекцию Furnitures, которая работает только с Furniture и производными от него классами.
Заполнить коллекцию тестовыми данными (придумать самостоятельно), не менее 15
Написать  для заполненных тестовыми данными коллекций запросы на LINQ  как методы коллекции:
    - получить диваны, которые дешевле всех кроватей
    - получить кресла, которые дороже средней цены дивана
    - сгруппировать все по площади
    
Вариант 7+++
Создать абстрактный класс Food (параметры - название, список ингредиентов, цена).
Создать производные классы: Drink (алкогольный/неалкогольный, объем в мл), Dish (диетический/нет, масса в граммах)
Создать пользовательскую коллекцию Menu, которая работает только с Food и производными от него классами.
Заполнить коллекцию тестовыми данными (придумать самостоятельно Drink и Dish), не менее 20
Написать  для заполненных тестовыми данными коллекций запросы на LINQ  как методы коллекции:
    - упорядочить все товары по цене за грамм или за мл
    - найти все возможные комбинации dish+drink, цена которых менее, указанной в аргументе
    - получить все ингредиенты из всех блюд
    - получить только безалкогольные напитки
    - получить только диетические блюда, которые дешевле средней цены алкогольных напитков
    
Вариант 8
Создать абстрактный класс Person со следующими свойствами: имя, фамилия, возраст, пол.
Создать пользовательскую коллекцию Clinic, которая работает только с Person и производными от него классами.
Создать производные классы для Person: доктор, мед.сестра, санитар.
Заполнить коллекцию тестовыми данными (придумать самостоятельно), не менее 20
Написать  для заполненных тестовыми данными коллекций запросы на LINQ  как методы коллекции:
	- разделить всех докторов на три группы (до 30 лет, до 50 лет, старше 50 лет) и вывести группы
	- найти средний возраст работников-мужчин
	- получить массив объектов (всего таких объектов три - для докторов, для медсестер, для санитаров), в каждом объекте данные: процентное соотношение мужчик и женщин
	
	
Вариант 9
Создать абстрактный класс Product со следующими свойствами: название, цена, описание.
Создать пользовательскую коллекцию Shop, которая работает только с Product и производными от него классами.
Создать производные классы для Product: верхняя одежда, обувь, аксессуары
Заполнить коллекцию тестовыми данными (придумать самостоятельно), не менее 20
Написать  для заполненных тестовыми данными коллекций запросы на LINQ  как методы коллекции:
	- получить товары из диапазона, переданного в качестве аргументов
	- разделить обувь на две группы: дороже средней цены вверхней одежды и дешевле средней цены
	- получить массив объектов (для каждого типа продуктов, т.е. три элемнта в массиве), каждый объект содержит следующие данные: средняя стоимость, самый дорогой продукт в категории
    
Вариант 10
Создать абстрактный класс Player (игрок в хоккее) со следующими свойствами: имя, фамилия, возраст, рост, сколько игр провел.
Создать пользовательскую коллекцию Team, которая работает только с Player и производными от него классами.
Создать производные классы для Player: вратарь (кол-во пропущенных шайб), защитник (забитые шайбы, результативные передачи), нападающий (забитые шайбы, результативные передачи).
Заполнить коллекцию тестовыми данными (придумать самостоятельно), не менее 20
Написать  для заполненных тестовыми данными коллекций запросы на LINQ  как методы коллекции:
    - получить упорядоченный массив объектов, каждый элемент которого состоит из двух частей - "имя фамилия" (нападающего или защитника) и отношение забитых шайб к общему числу проведенных игр
    - получить защитников, которые забили больше, чем среднее кол-во забитых нападающими
    - упорядочить вратарей по отношению пропущенных шайб к проведенным играм (сначала лучшие вратари)